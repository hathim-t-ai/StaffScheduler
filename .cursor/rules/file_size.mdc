---
description:
globs:
alwaysApply: false
---
# File Size Limitations

- **Maximum File Size: 350 Lines**
  - Files exceeding 350 lines of code should be refactored into multiple smaller files
  - Large components should be broken down into smaller, reusable components
  - Business logic should be extracted into custom hooks for reusability and testability

## Refactoring Strategies

- **Component Extraction:**
  ```tsx
  // ❌ DON'T: Have everything in one large component
  const LargeComponent = () => {
    // 400+ lines of code with many concerns mixed together
  };

  // ✅ DO: Extract into smaller, focused components
  const MainComponent = () => {
    return (
      <>
        <HeaderSection />
        <ContentSection />
        <FooterSection />
      </>
    );
  };
  ```

- **Logic Extraction with Custom Hooks:**
  ```tsx
  // ❌ DON'T: Mix component rendering with complex logic
  const ComponentWithComplexLogic = () => {
    // 200+ lines of state management and business logic
    // 150+ lines of rendering JSX
  };

  // ✅ DO: Extract logic into custom hooks
  // In a separate file: useComplexLogic.ts
  export const useComplexLogic = () => {
    // All the state management and business logic
    return { data, actions, state };
  };

  // In your component file
  const BetterComponent = () => {
    const { data, actions, state } = useComplexLogic();
    // Focus only on rendering with the data
  };
  ```

- **Utility Function Extraction:**
  ```typescript
  // ❌ DON'T: Keep helper functions in the component file
  const ComponentWithHelpers = () => {
    const helperFunction1 = () => { /* complex logic */ };
    const helperFunction2 = () => { /* complex logic */ };
    // More helper functions...
    
    // Component logic and JSX
  };

  // ✅ DO: Move helpers to utility files
  // In utils/helpers.ts
  export const helperFunction1 = () => { /* complex logic */ };
  export const helperFunction2 = () => { /* complex logic */ };

  // In your component
  import { helperFunction1, helperFunction2 } from '../utils/helpers';
  ```

## Benefits of Smaller Files

- **Improved Readability:** Easier to understand the purpose and flow of a component
- **Better Maintainability:** Smaller, focused files are easier to maintain
- **Enhanced Testability:** Separated concerns are easier to test in isolation
- **Simplified Code Reviews:** Smaller files lead to more focused code reviews
- **Faster Onboarding:** New developers can more quickly understand smaller, focused files

When a file approaches 350 lines, consider whether the functionality can be broken down into smaller, more focused parts. This rule applies to all source code files including components, utilities, and hooks.
