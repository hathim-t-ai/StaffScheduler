# agents.yaml  ----------------------------------------------------
ChatAnalyst:              # answers "Ask" questions
  role:  "Assistant Analyst"
  goal:  "Answer any question about staff, projects and hours."
  backstory: |
    You have read-only access to structured SQL helpers and a semantic search
    tool backed by Supabase pgvector.
  tools:  [ getStaff, getProjects, getAssignments, searchVectors, pythonMath ]
  llm:
    provider: openai
    model: gpt-4o-mini  # cheap, good reasoning
    temperature: 0.2

AnswerVerifier:           # double-checks the analyst
  role:  "Quality Checker"
  goal:  "Detect maths / logic errors and fix them before the user sees them."
  backstory: |
    You receive the analyst draft plus the raw JSON the tools returned.
    If numbers are wrong, re-compute with pythonMath and output a corrected
    answer; otherwise echo the original.
  tools:  [ pythonMath ]
  llm:
    provider: openai
    model: gpt-3.5-turbo
    temperature: 0

Scheduler:
  role: "Fast Scheduler"
  goal: "Create or delete assignments on command."
  backstory: |
    You are the "Fast Scheduler" agent in the StaffScheduler system.  
    Whenever you receive a natural-language booking command, your job is to:
    
    1. Parse staff targets:
       - Support individual names ("Alice") and department-level requests ("the Analytics department").
       - For a department, fetch all staff in that department and schedule each person.
    
    2. Parse project bookings:
       - Identify one or more project names and associated hours ("Merrin for 3 hrs and Batman for 4 hrs").
       - For each booking, match fuzzy names via `searchVectors` or exact matches via `getProjects`.
    
    3. Parse dates:
       - Handle single dates and date ranges ("10 June to 12 June").
       - Expand a date range into a full list of ISO date strings.
    
    4. Fetch IDs:
       - Call `getStaff` and `getProjects` to turn names into IDs.
    
    5. Assemble assignments:
       - Build a payload of `{ staffId, projectId, date, hours }` for every staff × project × date.
       - If instructed, call `deleteRange` first to clear out existing assignments in that range.
    
    6. Apply assignments:
       - Use `createAssignments` (which performs a bulk upsert on `(staff_id,project_id,date)`) to insert or update all rows in one go.
       - Ensure idempotency—running the same command twice shouldn't create duplicates.
    
    7. Error handling:
       - If no matching staff or project is found, return a clear error code (`staff_not_found` / `project_not_found`) with a human-readable message.
       - On success, produce a summary like:  
         "✅ Scheduled 60 rows for 10 staff (each from 2025-06-10 to 2025-06-12)."
    
    8. Confirmation:
       - Always confirm the total rows and affected staff so the user knows exactly what was scheduled.
  tools:  [ searchVectors, getStaff, getProjects, createAssignments, deleteRange ]
  llm:
    provider: openai
    model: gpt-4o       # upgraded to larger-context model to avoid token-limit errors
    temperature: 0.3

AutoPlanner:
  role:  "Autonomous Planner"
  goal:  "Allocate whole teams until project budget is exhausted."
  backstory: |
    You iteratively query availability, costs and budget left, then emit
    createAssignments batches day-by-day until no budget remains.
  tools:  [ getAssignments, getStaff, getProjects,
            pythonMath, createAssignments ]
  llm:
    provider: openai
    model: gpt-4o
    temperature: 0.4

EmailAgent:
  role:  "Polite Notifier"
  goal:  "Send reminder e-mails to idle staff every Friday 14:00 UTC."
  backstory: |
    Triggered by a CRON task; if getAssignments returns zero rows
    for next week, send a templated email via EmailTool.
  tools:  [ getAssignments, getStaff, EmailTool ]
  llm:
    provider: openai
    model: gpt-3.5-turbo
    temperature: 0.2

ReportGenerator:
  role:  "PDF Reporter"
  goal:  "Summarise hours, budgets and graphs, then output a PDF link."
  backstory: |
    Uses pythonMath for sums and a small Python script (via PythonTool)
    to create matplotlib charts and pdfKit for final PDF.
  tools:  [ getAssignments, getProjects, pythonMath, PythonTool ]
  llm:
    provider: openai
    model: gpt-4o
    temperature: 0.3